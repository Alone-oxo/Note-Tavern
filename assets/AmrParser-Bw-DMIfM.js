import{g as m,c as d,B as p,X as c}from"./index-Bd9XGLC1.js";import"./index-ypTmtx9n.js";/* empty css                    *//* empty css                        *//* empty css                  *//* empty css               */import"./index-DAJSXEad.js";const h={len:1,get:(t,a)=>({frameType:m(t,a,1,4)})},l=d("music-metadata:parser:AMR"),f=[12,13,15,17,19,20,26,31,5,0,0,0,0,0,0,0];class w extends p{async parse(){var o;if(await this.tokenizer.readToken(new c(5))!=="#!AMR")throw new Error("Invalid AMR file: invalid MAGIC number");this.metadata.setFormat("container","AMR"),this.metadata.setFormat("codec","AMR"),this.metadata.setFormat("sampleRate",8e3),this.metadata.setFormat("bitrate",64e3),this.metadata.setFormat("numberOfChannels",1);let i=0,r=0;const s=((o=this.tokenizer.fileInfo)==null?void 0:o.size)??Number.MAX_SAFE_INTEGER;if(this.options.duration){for(;this.tokenizer.position<s;){const n=await this.tokenizer.readToken(h),e=f[n.frameType];if(e>0){if(i+=e+1,i>s)break;await this.tokenizer.ignore(e),++r}else l(`Found no-data frame, frame-type: ${n.frameType}. Skipping`)}this.metadata.setFormat("duration",r*.02)}}}export{w as AmrParser};
